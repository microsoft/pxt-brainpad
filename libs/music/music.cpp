#include "pxt.h"

// There is no DAC on STM32F401

#define NOTE_PAUSE 20

enum class SoundOutputDestination {
  //% block="pin PWM"
  PinPWM = 1,
  //% block="speaker"
  Speaker = 0,
};

namespace music {

SoundOutputDestination soundOutputDestination = SoundOutputDestination::Speaker;

/**
 * Turn the on-board speaker on or off.
 * @param out the destination for sounds generated by the synthesizer
 */
// weight=2
// blockId=music_set_output block="set output %out"
// parts="speaker" blockGap=8 advanced=true
void setOutput(SoundOutputDestination out) {
  if (out != soundOutputDestination) {
    soundOutputDestination = out;
  }
}

/**
* Play a tone through the speaker for some amount of time.
* @param frequency pitch of the tone to play in Hertz (Hz), eg: Note.C
* @param ms tone duration in milliseconds (ms), eg: music.beat(BeatFraction.Half)
*/
//% help=music/play-tone
//% blockId=music_play_note block="play tone|at %note=device_note|for %duration=device_beat"
//% parts="headphone" async
//% blockNamespace=music
//% weight=76 blockGap=8
void playTone(int frequency, int ms) {
  auto pitchPin = lookupPin(
      soundOutputDestination == SoundOutputDestination::Speaker ? PB_8 : PA_8);

  if (frequency <= 0) {
    pitchPin->setAnalogValue(0);
  } else {
    pitchPin->setAnalogValue(512);
    pitchPin->setAnalogPeriodUs(1000000 / frequency);
    if (ms > 0) {
      int d = max(1, ms - NOTE_PAUSE); // allow for short rest
      int r = max(1, ms - d);
      fiber_sleep(d);
      pitchPin->setAnalogValue(0);
      fiber_sleep(r);
    }
  }
}

} // namespace music
