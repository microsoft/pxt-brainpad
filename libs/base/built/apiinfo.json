{
 "byQName": {
  "Array": {
   "kind": 5,
   "namespace": "",
   "name": "Array",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockNamespace": "Arrays",
    "paramHelp": {},
    "jsDoc": "Add, remove, and replace items in lists.\n\nAdd, remove, and replace items in lists.",
    "block": "Array"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "",
   "parameters": null,
   "qName": "Array"
  },
  "Array.length": {
   "kind": 2,
   "namespace": "Array",
   "name": "length",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Array_::length",
    "weight": 84,
    "blockId": "lists_length",
    "block": "length of %VALUE",
    "blockBuiltin": "true",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Get or set the length of an array. This number is one more than the index of the last element the array.",
    "_name": "length"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "Array.length"
  },
  "Array.push": {
   "kind": 1,
   "namespace": "Array",
   "name": "push",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/push",
    "shim": "Array_::push",
    "weight": 49,
    "blockId": "array_push",
    "block": "%list| add value %value| to end",
    "blockNamespace": "arrays",
    "paramHelp": {
     "items": "New elements of the Array."
    },
    "jsDoc": "Append a new element to an array.",
    "_name": "push"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "item",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "push(null)",
   "qName": "Array.push"
  },
  "Array.pop": {
   "kind": 1,
   "namespace": "Array",
   "name": "pop",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/pop",
    "shim": "Array_::pop",
    "weight": 48,
    "blockId": "array_pop",
    "block": "get and remove last value from %list",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Remove the last element from an array and return it.",
    "_name": "pop"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [],
   "snippet": "pop()",
   "qName": "Array.pop"
  },
  "Array.reverse": {
   "kind": 1,
   "namespace": "Array",
   "name": "reverse",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/reverse",
    "helper": "arrayReverse",
    "weight": 10,
    "blockId": "array_reverse",
    "block": "reverse %list",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.",
    "_name": "reverse"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [],
   "snippet": "reverse()",
   "qName": "Array.reverse"
  },
  "Array.shift": {
   "kind": 1,
   "namespace": "Array",
   "name": "shift",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/shift",
    "helper": "arrayShift",
    "weight": 70,
    "blockId": "array_shift",
    "block": "get and remove first value from %list",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Remove the first element from an array and return it. This method changes the length of the array.",
    "_name": "shift"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [],
   "snippet": "shift()",
   "qName": "Array.shift"
  },
  "Array.unshift": {
   "kind": 1,
   "namespace": "Array",
   "name": "unshift",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/unshift",
    "helper": "arrayUnshift",
    "weight": 69,
    "blockId": "array_unshift",
    "block": "%list| insert %value| at beginning",
    "blockNamespace": "arrays",
    "paramHelp": {
     "element": "to insert at the start of the Array."
    },
    "jsDoc": "Add one element to the beginning of an array and return the new length of the array.",
    "_name": "unshift"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "value",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "unshift(null)",
   "qName": "Array.unshift"
  },
  "Array.slice": {
   "kind": 1,
   "namespace": "Array",
   "name": "slice",
   "attributes": {
    "paramDefl": {
     "start": "0",
     "end": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/slice",
    "helper": "arraySlice",
    "weight": 41,
    "blockNamespace": "arrays",
    "paramHelp": {
     "start": "The beginning of the specified portion of the array. eg: 0",
     "end": "The end of the specified portion of the array. eg: 0"
    },
    "jsDoc": "Return a section of an array.",
    "_name": "slice"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "start",
     "description": "The beginning of the specified portion of the array. eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "end",
     "description": "The end of the specified portion of the array. eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "slice(0, 0)",
   "qName": "Array.slice"
  },
  "Array.splice": {
   "kind": 1,
   "namespace": "Array",
   "name": "splice",
   "attributes": {
    "paramDefl": {
     "start": "0",
     "deleteCount": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "helper": "arraySplice",
    "weight": 40,
    "paramHelp": {
     "start": "The zero-based location in the array from which to start removing elements. eg: 0",
     "deleteCount": "The number of elements to remove. eg: 0"
    },
    "jsDoc": "Remove elements from an array.",
    "_name": "splice"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "start",
     "description": "The zero-based location in the array from which to start removing elements. eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "deleteCount",
     "description": "The number of elements to remove. eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "splice(0, 0)",
   "qName": "Array.splice"
  },
  "Array.sort": {
   "kind": 1,
   "namespace": "Array",
   "name": "sort",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "helper": "arraySort",
    "weight": 40,
    "paramHelp": {
     "specifies": "a function that defines the sort order. If omitted, the array is sorted according to the prmitive type"
    },
    "jsDoc": "Sort the elements of an array in place and returns the array. The sort is not necessarily stable.",
    "_name": "sort"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "callbackfn",
     "description": "",
     "type": "(value1: T, value2: T) => number",
     "handlerParameters": [
      {
       "name": "value1",
       "type": "T"
      },
      {
       "name": "value2",
       "type": "T"
      }
     ],
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "sort()",
   "qName": "Array.sort"
  },
  "Array.map": {
   "kind": 1,
   "namespace": "Array",
   "name": "map",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "helper": "arrayMap",
    "weight": 40,
    "paramHelp": {
     "callbackfn": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array."
    },
    "jsDoc": "Call a defined callback function on each element of an array, and return an array containing the results.",
    "_name": "map"
   },
   "pkg": null,
   "retType": "U[]",
   "parameters": [
    {
     "name": "callbackfn",
     "description": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.",
     "type": "(value: T, index: number) => U",
     "handlerParameters": [
      {
       "name": "value",
       "type": "T"
      },
      {
       "name": "index",
       "type": "number"
      }
     ],
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "map(function () {})",
   "qName": "Array.map"
  },
  "Array.filter": {
   "kind": 1,
   "namespace": "Array",
   "name": "filter",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "helper": "arrayFilter",
    "weight": 40,
    "paramHelp": {
     "callbackfn": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array."
    },
    "jsDoc": "Return the elements of an array that meet the condition specified in a callback function.",
    "_name": "filter"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "callbackfn",
     "description": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.",
     "type": "(value: T, index: number) => boolean",
     "handlerParameters": [
      {
       "name": "value",
       "type": "T"
      },
      {
       "name": "index",
       "type": "number"
      }
     ],
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "filter(function () {})",
   "qName": "Array.filter"
  },
  "Array.reduce": {
   "kind": 1,
   "namespace": "Array",
   "name": "reduce",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "helper": "arrayReduce",
    "weight": 40,
    "paramHelp": {
     "callbackfn": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
     "initialValue": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
    },
    "jsDoc": "Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
    "_name": "reduce"
   },
   "pkg": null,
   "retType": "U",
   "parameters": [
    {
     "name": "callbackfn",
     "description": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
     "type": "(previousValue: U, currentValue: T, currentIndex: number) => U",
     "handlerParameters": [
      {
       "name": "previousValue",
       "type": "U"
      },
      {
       "name": "currentValue",
       "type": "T"
      },
      {
       "name": "currentIndex",
       "type": "number"
      }
     ],
     "options": {},
     "isEnum": false
    },
    {
     "name": "initialValue",
     "description": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
     "type": "U",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "reduce(function () {}, null)",
   "qName": "Array.reduce"
  },
  "Array.removeElement": {
   "kind": 1,
   "namespace": "Array",
   "name": "removeElement",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Array_::removeElement",
    "weight": 48,
    "paramHelp": {},
    "jsDoc": "Remove the first occurence of an object. Returns true if removed.",
    "_name": "removeElement"
   },
   "pkg": null,
   "retType": "boolean",
   "parameters": [
    {
     "name": "element",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "removeElement(null)",
   "qName": "Array.removeElement"
  },
  "Array.removeAt": {
   "kind": 1,
   "namespace": "Array",
   "name": "removeAt",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/remove-at",
    "shim": "Array_::removeAt",
    "weight": 49,
    "blockId": "array_removeat",
    "block": "%list| remove value at %index",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Remove the element at a certain index.",
    "_name": "removeAt"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [
    {
     "name": "index",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "removeAt(0)",
   "qName": "Array.removeAt"
  },
  "Array.insertAt": {
   "kind": 1,
   "namespace": "Array",
   "name": "insertAt",
   "attributes": {
    "paramDefl": {
     "index": "0",
     "the": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/insert-at",
    "shim": "Array_::insertAt",
    "weight": 84,
    "blockId": "array_insertAt",
    "block": "%list| insert at %index| value %value",
    "blockNamespace": "arrays",
    "paramHelp": {
     "index": "the zero-based position in the list to insert the value, eg: 0",
     "the": "value to insert, eg: 0"
    },
    "jsDoc": "Insert the value at a particular index, increases length by 1",
    "_name": "insertAt"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "index",
     "description": "the zero-based position in the list to insert the value, eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "insertAt(0, null)",
   "qName": "Array.insertAt"
  },
  "Array.indexOf": {
   "kind": 1,
   "namespace": "Array",
   "name": "indexOf",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/index-of",
    "shim": "Array_::indexOf",
    "weight": 50,
    "blockId": "array_indexof",
    "block": "%list| find index of %value",
    "blockNamespace": "arrays",
    "paramHelp": {
     "item": "The value to locate in the array.",
     "fromIndex": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
    },
    "jsDoc": "Return the index of the first occurrence of a value in an array.",
    "_name": "indexOf"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "item",
     "description": "The value to locate in the array.",
     "type": "T",
     "options": {},
     "isEnum": false
    },
    {
     "name": "fromIndex",
     "description": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "indexOf(null)",
   "qName": "Array.indexOf"
  },
  "Array.get": {
   "kind": 1,
   "namespace": "Array",
   "name": "get",
   "attributes": {
    "paramDefl": {
     "index": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/get",
    "shim": "Array_::getAt",
    "weight": 85,
    "paramHelp": {
     "index": "the zero-based position in the list of the item, eg: 0"
    },
    "jsDoc": "Get the value at a particular index",
    "_name": "get"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [
    {
     "name": "index",
     "description": "the zero-based position in the list of the item, eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "get(0)",
   "qName": "Array.get"
  },
  "Array.set": {
   "kind": 1,
   "namespace": "Array",
   "name": "set",
   "attributes": {
    "paramDefl": {
     "index": "0",
     "the": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/set",
    "shim": "Array_::setAt",
    "weight": 84,
    "paramHelp": {
     "index": "the zero-based position in the list to store the value, eg: 0",
     "the": "value to insert, eg: 0"
    },
    "jsDoc": "Store a value at a particular index",
    "_name": "set"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "index",
     "description": "the zero-based position in the list to store the value, eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "set(0, null)",
   "qName": "Array.set"
  },
  "String": {
   "kind": 5,
   "namespace": "",
   "name": "String",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockNamespace": "Text",
    "paramHelp": {},
    "jsDoc": "Combine, split, and search text strings.\n\nCombine, split, and search text strings.",
    "block": "String"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "",
   "parameters": null,
   "qName": "String"
  },
  "String.concat": {
   "kind": 1,
   "namespace": "String",
   "name": "concat",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::concat",
    "weight": 49,
    "blockId": "string_concat",
    "blockNamespace": "text",
    "paramHelp": {
     "other": "The string to append to the end of the string."
    },
    "jsDoc": "Returns a string that contains the concatenation of two or more strings.",
    "_name": "concat"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [
    {
     "name": "other",
     "description": "The string to append to the end of the string.",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "concat(\"\")",
   "qName": "String.concat"
  },
  "String.charAt": {
   "kind": 1,
   "namespace": "String",
   "name": "charAt",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::charAt",
    "weight": 48,
    "help": "text/char-at",
    "blockId": "string_get",
    "block": "char from %this=text|at %pos",
    "blockNamespace": "text",
    "paramHelp": {
     "index": "The zero-based index of the desired character."
    },
    "jsDoc": "Return the character at the specified index.",
    "_name": "charAt"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [
    {
     "name": "index",
     "description": "The zero-based index of the desired character.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "charAt(0)",
   "qName": "String.charAt"
  },
  "String.length": {
   "kind": 2,
   "namespace": "String",
   "name": "length",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "property": "true",
    "shim": "String_::length",
    "weight": 47,
    "blockId": "text_length",
    "block": "length of %VALUE",
    "blockBuiltin": "true",
    "blockNamespace": "text",
    "paramHelp": {},
    "jsDoc": "Returns the length of a String object.",
    "_name": "length"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "String.length"
  },
  "String.charCodeAt": {
   "kind": 1,
   "namespace": "String",
   "name": "charCodeAt",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::charCodeAt",
    "paramHelp": {
     "index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
    },
    "jsDoc": "Return the Unicode value of the character at the specified location.",
    "_name": "charCodeAt"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "index",
     "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "charCodeAt(0)",
   "qName": "String.charCodeAt"
  },
  "String.compare": {
   "kind": 1,
   "namespace": "String",
   "name": "compare",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::compare",
    "help": "text/compare",
    "blockId": "string_compare",
    "block": "compare %this=text| to %that",
    "blockNamespace": "text",
    "paramHelp": {
     "that": "String to compare to target string"
    },
    "jsDoc": "See how the order of characters in two strings is different (in ASCII encoding).",
    "_name": "compare"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "that",
     "description": "String to compare to target string",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "compare(\"\")",
   "qName": "String.compare"
  },
  "String.substr": {
   "kind": 1,
   "namespace": "String",
   "name": "substr",
   "attributes": {
    "paramDefl": {
     "length": "10",
     "start": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::substr",
    "help": "text/substr",
    "blockId": "string_substr",
    "block": "substring of %this=text|from %start|of length %length",
    "blockNamespace": "text",
    "paramHelp": {
     "start": "first character index; can be negative from counting from the end, eg:0",
     "length": "number of characters to extract"
    },
    "jsDoc": "Return a substring of the current string.",
    "_name": "substr"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [
    {
     "name": "start",
     "description": "first character index; can be negative from counting from the end, eg:0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "length",
     "description": "number of characters to extract",
     "type": "number",
     "initializer": "10",
     "default": "10",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "substr(0)",
   "qName": "String.substr"
  },
  "String.isEmpty": {
   "kind": 1,
   "namespace": "String",
   "name": "isEmpty",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::isEmpty",
    "blockId": "string_isempty",
    "blockNamespace": "text",
    "paramHelp": {},
    "jsDoc": "Returns a value indicating if the string is empty",
    "_name": "isEmpty"
   },
   "pkg": null,
   "retType": "boolean",
   "parameters": [],
   "snippet": "isEmpty()",
   "qName": "String.isEmpty"
  },
  "parseInt": {
   "kind": 3,
   "namespace": "",
   "name": "parseInt",
   "attributes": {
    "paramDefl": {
     "text": "123",
     "s": "123"
    },
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::toNumber",
    "help": "text/parse-int",
    "blockId": "string_parseint",
    "block": "parse to integer %text",
    "blockNamespace": "text",
    "paramHelp": {
     "s": "A string to convert into a number. eg: 123"
    },
    "jsDoc": "Convert a string to an integer.",
    "_name": "parseInt"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "text",
     "description": "",
     "type": "string",
     "initializer": "123",
     "default": "123",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "parseInt(\"123\")",
   "qName": "parseInt"
  },
  "Object": {
   "kind": 9,
   "namespace": "",
   "name": "Object",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Object"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "Object",
   "parameters": null,
   "qName": "Object"
  },
  "Function": {
   "kind": 9,
   "namespace": "",
   "name": "Function",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Function"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "Function",
   "parameters": null,
   "qName": "Function"
  },
  "IArguments": {
   "kind": 9,
   "namespace": "",
   "name": "IArguments",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "IArguments"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "IArguments",
   "parameters": null,
   "qName": "IArguments"
  },
  "RegExp": {
   "kind": 9,
   "namespace": "",
   "name": "RegExp",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "RegExp"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "RegExp",
   "parameters": null,
   "qName": "RegExp"
  },
  "Boolean": {
   "kind": 9,
   "namespace": "",
   "name": "Boolean",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Boolean"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "Boolean",
   "parameters": null,
   "qName": "Boolean"
  },
  "Boolean.toString": {
   "kind": 1,
   "namespace": "Boolean",
   "name": "toString",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Boolean_::toString",
    "paramHelp": {},
    "jsDoc": "Returns a string representation of an object.",
    "_name": "toString"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [],
   "snippet": "toString()",
   "qName": "Boolean.toString"
  },
  "String.fromCharCode": {
   "kind": 3,
   "namespace": "String",
   "name": "fromCharCode",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "math/from-char-code",
    "shim": "String_::fromCharCode",
    "weight": 1,
    "blockNamespace": "Text",
    "blockId": "stringFromCharCode",
    "block": "text from char code %code",
    "paramHelp": {},
    "jsDoc": "Make a string from the given ASCII character code.",
    "_name": "fromCharCode"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [
    {
     "name": "code",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "fromCharCode(0)",
   "qName": "String.fromCharCode"
  },
  "Number": {
   "kind": 9,
   "namespace": "",
   "name": "Number",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Number"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "Number",
   "parameters": null,
   "qName": "Number"
  },
  "Number.toString": {
   "kind": 1,
   "namespace": "Number",
   "name": "toString",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Number_::toString",
    "paramHelp": {},
    "jsDoc": "Returns a string representation of a number.",
    "_name": "toString"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [],
   "snippet": "toString()",
   "qName": "Number.toString"
  },
  "Math": {
   "kind": 5,
   "namespace": "",
   "name": "Math",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "More complex operations with numbers.",
    "block": "Math"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "Math"
  },
  "Math.pow": {
   "kind": 3,
   "namespace": "Math",
   "name": "pow",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::pow",
    "paramHelp": {
     "x": "The base value of the expression.",
     "y": "The exponent value of the expression."
    },
    "jsDoc": "Returns the value of a base expression taken to a specified power.",
    "_name": "pow"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The base value of the expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "y",
     "description": "The exponent value of the expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "pow(0, 0)",
   "qName": "Math.pow"
  },
  "Math.random": {
   "kind": 3,
   "namespace": "Math",
   "name": "random",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::random",
    "helpUrl": "/reference/math/random",
    "paramHelp": {},
    "jsDoc": "Returns a pseudorandom number between 0 and 1.",
    "_name": "random"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [],
   "snippet": "random()",
   "qName": "Math.random"
  },
  "Math.randomRange": {
   "kind": 3,
   "namespace": "Math",
   "name": "randomRange",
   "attributes": {
    "paramDefl": {
     "min": "0",
     "max": "10"
    },
    "callingConvention": 0,
    "_source": null,
    "blockId": "device_random",
    "block": "pick random %min|to %limit",
    "helpUrl": "/reference/math/random-range",
    "shim": "Math_::randomRange",
    "paramHelp": {
     "min": "the lower inclusive bound, eg: 0",
     "max": "the upper inclusive bound, eg: 10"
    },
    "jsDoc": "Returns a pseudorandom number between min and max included. \nIf both numbers are integral, the result is integral.",
    "_name": "randomRange"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "min",
     "description": "the lower inclusive bound, eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "max",
     "description": "the upper inclusive bound, eg: 10",
     "type": "number",
     "initializer": "10",
     "default": "10",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "randomRange(0, 10)",
   "qName": "Math.randomRange"
  },
  "Math.log": {
   "kind": 3,
   "namespace": "Math",
   "name": "log",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::log",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns the natural logarithm (base e) of a number.",
    "_name": "log"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "log(0)",
   "qName": "Math.log"
  },
  "Math.exp": {
   "kind": 3,
   "namespace": "Math",
   "name": "exp",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::exp",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns returns ``e^x``.",
    "_name": "exp"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "exp(0)",
   "qName": "Math.exp"
  },
  "Math.sin": {
   "kind": 3,
   "namespace": "Math",
   "name": "sin",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::sin",
    "paramHelp": {
     "x": "An angle in radians"
    },
    "jsDoc": "Returns the sine of a number.",
    "_name": "sin"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "An angle in radians",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "sin(0)",
   "qName": "Math.sin"
  },
  "Math.cos": {
   "kind": 3,
   "namespace": "Math",
   "name": "cos",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::cos",
    "paramHelp": {
     "x": "An angle in radians"
    },
    "jsDoc": "Returns the cosine of a number.",
    "_name": "cos"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "An angle in radians",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "cos(0)",
   "qName": "Math.cos"
  },
  "Math.tan": {
   "kind": 3,
   "namespace": "Math",
   "name": "tan",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::tan",
    "paramHelp": {
     "x": "An angle in radians"
    },
    "jsDoc": "Returns the tangent of a number.",
    "_name": "tan"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "An angle in radians",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "tan(0)",
   "qName": "Math.tan"
  },
  "Math.asin": {
   "kind": 3,
   "namespace": "Math",
   "name": "asin",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::asin",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns the arcsine (in radians) of a number",
    "_name": "asin"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "asin(0)",
   "qName": "Math.asin"
  },
  "Math.acos": {
   "kind": 3,
   "namespace": "Math",
   "name": "acos",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::acos",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns the arccosine (in radians) of a number",
    "_name": "acos"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "acos(0)",
   "qName": "Math.acos"
  },
  "Math.atan": {
   "kind": 3,
   "namespace": "Math",
   "name": "atan",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::atan",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns the arctangent (in radians) of a number",
    "_name": "atan"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "atan(0)",
   "qName": "Math.atan"
  },
  "Math.atan2": {
   "kind": 3,
   "namespace": "Math",
   "name": "atan2",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::atan2",
    "paramHelp": {
     "y": "A number",
     "x": "A number"
    },
    "jsDoc": "Returns the arctangent of the quotient of its arguments.",
    "_name": "atan2"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "y",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "atan2(0, 0)",
   "qName": "Math.atan2"
  },
  "Math.sqrt": {
   "kind": 3,
   "namespace": "Math",
   "name": "sqrt",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::sqrt",
    "paramHelp": {
     "x": "A numeric expression."
    },
    "jsDoc": "Returns the square root of a number.",
    "_name": "sqrt"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "sqrt(0)",
   "qName": "Math.sqrt"
  },
  "Math.ceil": {
   "kind": 3,
   "namespace": "Math",
   "name": "ceil",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::ceil",
    "paramHelp": {
     "x": "A numeric expression."
    },
    "jsDoc": "Returns the smallest number greater than or equal to its numeric argument.",
    "_name": "ceil"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "ceil(0)",
   "qName": "Math.ceil"
  },
  "Math.floor": {
   "kind": 3,
   "namespace": "Math",
   "name": "floor",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::floor",
    "paramHelp": {
     "x": "A numeric expression."
    },
    "jsDoc": "Returns the greatest number less than or equal to its numeric argument.",
    "_name": "floor"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "floor(0)",
   "qName": "Math.floor"
  },
  "Math.trunc": {
   "kind": 3,
   "namespace": "Math",
   "name": "trunc",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::trunc",
    "paramHelp": {
     "x": "A numeric expression."
    },
    "jsDoc": "Returns the number with the decimal part truncated.",
    "_name": "trunc"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "trunc(0)",
   "qName": "Math.trunc"
  },
  "Math.round": {
   "kind": 3,
   "namespace": "Math",
   "name": "round",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::round",
    "paramHelp": {
     "x": "The value to be rounded to the nearest number."
    },
    "jsDoc": "Returns a supplied numeric expression rounded to the nearest number.",
    "_name": "round"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The value to be rounded to the nearest number.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "round(0)",
   "qName": "Math.round"
  },
  "Math.imul": {
   "kind": 3,
   "namespace": "Math",
   "name": "imul",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::imul",
    "paramHelp": {
     "x": "The first number",
     "y": "The second number"
    },
    "jsDoc": "Returns the value of integer signed 32 bit multiplication of two numbers.",
    "_name": "imul"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The first number",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "y",
     "description": "The second number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "imul(0, 0)",
   "qName": "Math.imul"
  },
  "Math.idiv": {
   "kind": 3,
   "namespace": "Math",
   "name": "idiv",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::idiv",
    "paramHelp": {
     "x": "The first number",
     "y": "The second number"
    },
    "jsDoc": "Returns the value of integer signed 32 bit division of two numbers.",
    "_name": "idiv"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The first number",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "y",
     "description": "The second number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "idiv(0, 0)",
   "qName": "Math.idiv"
  },
  "helpers": {
   "kind": 5,
   "namespace": "",
   "name": "helpers",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "helpers"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "helpers"
  },
  "helpers.arraySplice": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arraySplice",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arraySplice"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "start",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "len",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arraySplice([], 0, 0)",
   "qName": "helpers.arraySplice"
  },
  "helpers.arrayReverse": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayReverse",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayReverse"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayReverse([])",
   "qName": "helpers.arrayReverse"
  },
  "helpers.arrayShift": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayShift",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayShift"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayShift([])",
   "qName": "helpers.arrayShift"
  },
  "helpers.arrayUnshift": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayUnshift",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayUnshift"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayUnshift([], null)",
   "qName": "helpers.arrayUnshift"
  },
  "helpers.arraySort": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arraySort",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arraySort"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "callbackfn",
     "description": "",
     "type": "(value1: T, value2: T) => number",
     "handlerParameters": [
      {
       "name": "value1",
       "type": "T"
      },
      {
       "name": "value2",
       "type": "T"
      }
     ],
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arraySort([])",
   "qName": "helpers.arraySort"
  },
  "helpers.arrayMap": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayMap",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayMap"
   },
   "pkg": null,
   "retType": "U[]",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "callbackfn",
     "description": "",
     "type": "(value: T, index: number) => U",
     "handlerParameters": [
      {
       "name": "value",
       "type": "T"
      },
      {
       "name": "index",
       "type": "number"
      }
     ],
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayMap([], function () {})",
   "qName": "helpers.arrayMap"
  },
  "helpers.arrayFilter": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayFilter",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayFilter"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "callbackfn",
     "description": "",
     "type": "(value: T, index: number) => boolean",
     "handlerParameters": [
      {
       "name": "value",
       "type": "T"
      },
      {
       "name": "index",
       "type": "number"
      }
     ],
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayFilter([], function () {})",
   "qName": "helpers.arrayFilter"
  },
  "helpers.arrayReduce": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayReduce",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayReduce"
   },
   "pkg": null,
   "retType": "U",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "callbackfn",
     "description": "",
     "type": "(previousValue: U, currentValue: T, currentIndex: number) => U",
     "handlerParameters": [
      {
       "name": "previousValue",
       "type": "U"
      },
      {
       "name": "currentValue",
       "type": "T"
      },
      {
       "name": "currentIndex",
       "type": "number"
      }
     ],
     "options": {},
     "isEnum": false
    },
    {
     "name": "initialValue",
     "description": "",
     "type": "U",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayReduce([], function () {}, null)",
   "qName": "helpers.arrayReduce"
  },
  "helpers.arraySlice": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arraySlice",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arraySlice"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "start",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "end",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arraySlice([], 0, 0)",
   "qName": "helpers.arraySlice"
  },
  "Math.clamp": {
   "kind": 3,
   "namespace": "Math",
   "name": "clamp",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "clamp"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "min",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "max",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "clamp(0, 0, 0)",
   "qName": "Math.clamp"
  },
  "Math.abs": {
   "kind": 3,
   "namespace": "Math",
   "name": "abs",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {
     "x": "A numeric expression for which the absolute value is needed."
    },
    "jsDoc": "Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5.",
    "_name": "abs"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression for which the absolute value is needed.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "abs(0)",
   "qName": "Math.abs"
  },
  "Math.sign": {
   "kind": 3,
   "namespace": "Math",
   "name": "sign",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {
     "x": "The numeric expression to test"
    },
    "jsDoc": "Returns the sign of the x, indicating whether x is positive, negative or zero.",
    "_name": "sign"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The numeric expression to test",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "sign(0)",
   "qName": "Math.sign"
  },
  "Math.max": {
   "kind": 3,
   "namespace": "Math",
   "name": "max",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Returns the larger of two supplied numeric expressions.",
    "_name": "max"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "a",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "b",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "max(0, 0)",
   "qName": "Math.max"
  },
  "Math.min": {
   "kind": 3,
   "namespace": "Math",
   "name": "min",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Returns the smaller of two supplied numeric expressions.",
    "_name": "min"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "a",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "b",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "min(0, 0)",
   "qName": "Math.min"
  },
  "Buffer": {
   "kind": 9,
   "namespace": "",
   "name": "Buffer",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "indexerGet": "BufferMethods::getByte",
    "indexerSet": "BufferMethods::setByte",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Buffer"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "Buffer",
   "parameters": null,
   "qName": "Buffer"
  },
  "Buffer.setNumber": {
   "kind": 1,
   "namespace": "Buffer",
   "name": "setNumber",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "BufferMethods::setNumber",
    "paramHelp": {},
    "jsDoc": "Write a number in specified format in the buffer.",
    "_name": "setNumber"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "format",
     "description": "",
     "type": "NumberFormat",
     "options": {},
     "isEnum": true
    },
    {
     "name": "offset",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "setNumber(null, null, 0)",
   "qName": "Buffer.setNumber"
  },
  "Buffer.getNumber": {
   "kind": 1,
   "namespace": "Buffer",
   "name": "getNumber",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "BufferMethods::getNumber",
    "paramHelp": {},
    "jsDoc": "Read a number in specified format from the buffer.",
    "_name": "getNumber"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "format",
     "description": "",
     "type": "NumberFormat",
     "options": {},
     "isEnum": true
    },
    {
     "name": "offset",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "getNumber(null, null)",
   "qName": "Buffer.getNumber"
  },
  "Buffer.length": {
   "kind": 2,
   "namespace": "Buffer",
   "name": "length",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "property": "true",
    "shim": "BufferMethods::length",
    "paramHelp": {},
    "jsDoc": "Returns the length of a Buffer object.",
    "_name": "length"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "Buffer.length"
  },
  "Buffer.fill": {
   "kind": 1,
   "namespace": "Buffer",
   "name": "fill",
   "attributes": {
    "paramDefl": {
     "offset": "0",
     "length": "-1"
    },
    "callingConvention": 0,
    "_source": null,
    "shim": "BufferMethods::fill",
    "paramHelp": {},
    "jsDoc": "Fill (a fragment) of the buffer with given value.",
    "_name": "fill"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "value",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "offset",
     "description": "",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "length",
     "description": "",
     "type": "number",
     "initializer": "-1",
     "default": "-1",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "fill(null)",
   "qName": "Buffer.fill"
  },
  "Buffer.slice": {
   "kind": 1,
   "namespace": "Buffer",
   "name": "slice",
   "attributes": {
    "paramDefl": {
     "offset": "0",
     "length": "-1"
    },
    "callingConvention": 0,
    "_source": null,
    "shim": "BufferMethods::slice",
    "paramHelp": {},
    "jsDoc": "Return a copy of a fragment of a buffer.",
    "_name": "slice"
   },
   "pkg": null,
   "retType": "Buffer",
   "parameters": [
    {
     "name": "offset",
     "description": "",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "length",
     "description": "",
     "type": "number",
     "initializer": "-1",
     "default": "-1",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "slice()",
   "qName": "Buffer.slice"
  },
  "Buffer.shift": {
   "kind": 1,
   "namespace": "Buffer",
   "name": "shift",
   "attributes": {
    "paramDefl": {
     "start": "0",
     "length": "-1"
    },
    "callingConvention": 0,
    "_source": null,
    "shim": "BufferMethods::shift",
    "paramHelp": {
     "offset": "number of bytes to shift; use negative value to shift right",
     "start": "start offset in buffer. Default is 0.",
     "length": "number of elements in buffer. If negative, length is set as the buffer length minus"
    },
    "jsDoc": "Shift buffer left in place, with zero padding.\n\n\n\nstart. eg: -1",
    "_name": "shift"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "offset",
     "description": "number of bytes to shift; use negative value to shift right",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "start",
     "description": "start offset in buffer. Default is 0.",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "length",
     "description": "number of elements in buffer. If negative, length is set as the buffer length minus",
     "type": "number",
     "initializer": "-1",
     "default": "-1",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "shift(null)",
   "qName": "Buffer.shift"
  },
  "Buffer.toHex": {
   "kind": 1,
   "namespace": "Buffer",
   "name": "toHex",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "BufferMethods::toHex",
    "paramHelp": {},
    "jsDoc": "Convert a buffer to its hexadecimal representation.",
    "_name": "toHex"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [],
   "snippet": "toHex()",
   "qName": "Buffer.toHex"
  },
  "Buffer.rotate": {
   "kind": 1,
   "namespace": "Buffer",
   "name": "rotate",
   "attributes": {
    "paramDefl": {
     "start": "0",
     "length": "-1"
    },
    "callingConvention": 0,
    "_source": null,
    "shim": "BufferMethods::rotate",
    "paramHelp": {
     "offset": "number of bytes to shift; use negative value to shift right",
     "start": "start offset in buffer. Default is 0.",
     "length": "number of elements in buffer. If negative, length is set as the buffer length minus"
    },
    "jsDoc": "Rotate buffer left in place.\n\n\n\nstart. eg: -1",
    "_name": "rotate"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "offset",
     "description": "number of bytes to shift; use negative value to shift right",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "start",
     "description": "start offset in buffer. Default is 0.",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "length",
     "description": "number of elements in buffer. If negative, length is set as the buffer length minus",
     "type": "number",
     "initializer": "-1",
     "default": "-1",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "rotate(null)",
   "qName": "Buffer.rotate"
  },
  "Buffer.write": {
   "kind": 1,
   "namespace": "Buffer",
   "name": "write",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "BufferMethods::write",
    "paramHelp": {},
    "jsDoc": "Write contents of `src` at `dstOffset` in current buffer.",
    "_name": "write"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "dstOffset",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "src",
     "description": "",
     "type": "Buffer",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "write(null, null)",
   "qName": "Buffer.write"
  },
  "loops": {
   "kind": 5,
   "namespace": "",
   "name": "loops",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "block": "loops"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "loops"
  },
  "loops.forever": {
   "kind": 3,
   "namespace": "loops",
   "name": "forever",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "loops/forever",
    "weight": 100,
    "afterOnStart": true,
    "blockId": "forever",
    "block": "forever",
    "blockAllowMultiple": "1",
    "shim": "loops::forever",
    "paramHelp": {
     "body": "code to execute"
    },
    "jsDoc": "Repeats the code forever in the background. On each iteration, allows other codes to run.",
    "_name": "forever"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "a",
     "description": "",
     "type": "() => void",
     "handlerParameters": [],
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "forever(function () {})",
   "qName": "loops.forever"
  },
  "loops.pause": {
   "kind": 3,
   "namespace": "loops",
   "name": "pause",
   "attributes": {
    "paramDefl": {
     "ms": "100"
    },
    "callingConvention": 1,
    "_source": null,
    "help": "loops/pause",
    "weight": 99,
    "async": "true",
    "block": "pause %pause=timePicker|ms",
    "blockId": "device_pause",
    "shim": "loops::pause",
    "paramHelp": {
     "ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000"
    },
    "jsDoc": "Pause for the specified time in milliseconds",
    "_name": "pause"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "ms",
     "description": "how long to pause for, eg: 100, 200, 500, 1000, 2000",
     "type": "number",
     "initializer": "100",
     "default": "100",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "pause(100)",
   "qName": "loops.pause"
  },
  "control": {
   "kind": 5,
   "namespace": "",
   "name": "control",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 10,
    "color": "#31bca3",
    "icon": "",
    "advanced": true,
    "paramHelp": {},
    "jsDoc": "Program controls and events.",
    "block": "control"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "control"
  },
  "control.millis": {
   "kind": 3,
   "namespace": "control",
   "name": "millis",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "control/millis",
    "weight": 50,
    "blockId": "control_running_time",
    "block": "millis (ms)",
    "shim": "control::millis",
    "paramHelp": {},
    "jsDoc": "Gets the number of milliseconds elapsed since power on.",
    "_name": "millis"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [],
   "snippet": "millis()",
   "qName": "control.millis"
  },
  "control.onEvent": {
   "kind": 3,
   "namespace": "control",
   "name": "onEvent",
   "attributes": {
    "paramDefl": {
     "flags": "16"
    },
    "callingConvention": 0,
    "_source": null,
    "weight": 20,
    "blockGap": "8",
    "blockId": "control_on_event",
    "block": "on event|from %src|with value %value",
    "blockExternalInputs": "1",
    "help": "control/on-event",
    "shim": "control::onEvent",
    "inlineInputMode": "external",
    "paramHelp": {
     "id": "the event compoent id",
     "value": "the event value to match"
    },
    "jsDoc": "Run code when a registered event happens.",
    "_name": "onEvent"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "src",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "the event value to match",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "handler",
     "description": "",
     "type": "() => void",
     "handlerParameters": [],
     "options": {},
     "isEnum": false
    },
    {
     "name": "flags",
     "description": "",
     "type": "number",
     "initializer": "16",
     "default": "16",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "onEvent(null, null, function () {})",
   "qName": "control.onEvent"
  },
  "control.reset": {
   "kind": 3,
   "namespace": "control",
   "name": "reset",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 1,
    "_source": null,
    "weight": 30,
    "async": "true",
    "help": "control/reset",
    "blockGap": "8",
    "blockId": "control_reset",
    "block": "reset",
    "shim": "control::reset",
    "paramHelp": {},
    "jsDoc": "Reset the device.",
    "_name": "reset"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [],
   "snippet": "reset()",
   "qName": "control.reset"
  },
  "control.waitMicros": {
   "kind": 3,
   "namespace": "control",
   "name": "waitMicros",
   "attributes": {
    "paramDefl": {
     "micros": "4"
    },
    "callingConvention": 1,
    "_source": null,
    "help": "control/wait-micros",
    "weight": 29,
    "async": "true",
    "blockId": "control_wait_us",
    "block": "wait (µs)%micros",
    "shim": "control::waitMicros",
    "paramHelp": {
     "micros": "number of micro-seconds to wait. eg: 4"
    },
    "jsDoc": "Block the current fiber for the given microseconds",
    "_name": "waitMicros"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "micros",
     "description": "number of micro-seconds to wait. eg: 4",
     "type": "number",
     "initializer": "4",
     "default": "4",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "waitMicros(4)",
   "qName": "control.waitMicros"
  },
  "control.runInBackground": {
   "kind": 3,
   "namespace": "control",
   "name": "runInBackground",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "control/run-in-background",
    "blockAllowMultiple": "1",
    "afterOnStart": true,
    "blockId": "control_run_in_background",
    "block": "run in background",
    "blockGap": "8",
    "shim": "control::runInBackground",
    "paramHelp": {},
    "jsDoc": "Run other code in the background.",
    "_name": "runInBackground"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "a",
     "description": "",
     "type": "() => void",
     "handlerParameters": [],
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "runInBackground(function () {})",
   "qName": "control.runInBackground"
  },
  "control.waitForEvent": {
   "kind": 3,
   "namespace": "control",
   "name": "waitForEvent",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 1,
    "_source": null,
    "help": "control/wait-for-event",
    "async": "true",
    "blockId": "control_wait_for_event",
    "block": "wait for event|from %src|with value %value",
    "shim": "control::waitForEvent",
    "paramHelp": {},
    "jsDoc": "Blocks the calling thread until the specified event is raised.",
    "_name": "waitForEvent"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "src",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "waitForEvent(null, null)",
   "qName": "control.waitForEvent"
  },
  "control.deviceSerialNumber": {
   "kind": 3,
   "namespace": "control",
   "name": "deviceSerialNumber",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockId": "control_device_serial_number",
    "block": "device serial number",
    "weight": 9,
    "help": "control/device-serial-number",
    "shim": "control::deviceSerialNumber",
    "paramHelp": {},
    "jsDoc": "Derive a unique, consistent serial number of this device from internal data.",
    "_name": "deviceSerialNumber"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [],
   "snippet": "deviceSerialNumber()",
   "qName": "control.deviceSerialNumber"
  },
  "serial": {
   "kind": 5,
   "namespace": "",
   "name": "serial",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 2,
    "color": "#002050",
    "icon": "",
    "advanced": true,
    "paramHelp": {},
    "jsDoc": "Reading and writing data over a serial connection.",
    "block": "serial"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "serial"
  },
  "serial.writeString": {
   "kind": 3,
   "namespace": "serial",
   "name": "writeString",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "serial/write-string",
    "weight": 87,
    "blockHidden": true,
    "blockId": "serial_writestring",
    "block": "serial|write string %text",
    "shim": "serial::writeString",
    "paramHelp": {},
    "jsDoc": "Write some text to the serial port.",
    "_name": "writeString"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "text",
     "description": "",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "writeString(\"\")",
   "qName": "serial.writeString"
  },
  "serial.writeBuffer": {
   "kind": 3,
   "namespace": "serial",
   "name": "writeBuffer",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "serial/write-buffer",
    "weight": 6,
    "blockHidden": true,
    "blockId": "serial_writebuffer",
    "block": "serial|write buffer %buffer",
    "shim": "serial::writeBuffer",
    "paramHelp": {},
    "jsDoc": "Send a buffer across the serial connection.",
    "_name": "writeBuffer"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "buffer",
     "description": "",
     "type": "Buffer",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "writeBuffer(null)",
   "qName": "serial.writeBuffer"
  },
  "NumberFormat": {
   "kind": 6,
   "namespace": "",
   "name": "NumberFormat",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "NumberFormat"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat"
  },
  "NumberFormat.Int8LE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "Int8LE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Int8LE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.Int8LE"
  },
  "NumberFormat.UInt8LE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "UInt8LE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "UInt8LE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.UInt8LE"
  },
  "NumberFormat.Int16LE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "Int16LE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Int16LE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.Int16LE"
  },
  "NumberFormat.UInt16LE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "UInt16LE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "UInt16LE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.UInt16LE"
  },
  "NumberFormat.Int32LE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "Int32LE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Int32LE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.Int32LE"
  },
  "NumberFormat.Int8BE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "Int8BE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Int8BE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.Int8BE"
  },
  "NumberFormat.UInt8BE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "UInt8BE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "UInt8BE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.UInt8BE"
  },
  "NumberFormat.Int16BE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "Int16BE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Int16BE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.Int16BE"
  },
  "NumberFormat.UInt16BE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "UInt16BE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "UInt16BE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.UInt16BE"
  },
  "NumberFormat.Int32BE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "Int32BE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Int32BE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.Int32BE"
  },
  "NumberFormat.UInt32LE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "UInt32LE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "UInt32LE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.UInt32LE"
  },
  "NumberFormat.UInt32BE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "UInt32BE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "UInt32BE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.UInt32BE"
  },
  "NumberFormat.Float32LE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "Float32LE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Float32LE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.Float32LE"
  },
  "NumberFormat.Float64LE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "Float64LE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Float64LE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.Float64LE"
  },
  "NumberFormat.Float32BE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "Float32BE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Float32BE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.Float32BE"
  },
  "NumberFormat.Float64BE": {
   "kind": 7,
   "namespace": "NumberFormat",
   "name": "Float64BE",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Float64BE"
   },
   "pkg": null,
   "retType": "NumberFormat",
   "parameters": null,
   "qName": "NumberFormat.Float64BE"
  },
  "ValType": {
   "kind": 6,
   "namespace": "",
   "name": "ValType",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "ValType"
   },
   "pkg": null,
   "retType": "ValType",
   "parameters": null,
   "qName": "ValType"
  },
  "ValType.Undefined": {
   "kind": 7,
   "namespace": "ValType",
   "name": "Undefined",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Undefined"
   },
   "pkg": null,
   "retType": "ValType",
   "parameters": null,
   "qName": "ValType.Undefined"
  },
  "ValType.Boolean": {
   "kind": 7,
   "namespace": "ValType",
   "name": "Boolean",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Boolean"
   },
   "pkg": null,
   "retType": "ValType",
   "parameters": null,
   "qName": "ValType.Boolean"
  },
  "ValType.Number": {
   "kind": 7,
   "namespace": "ValType",
   "name": "Number",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Number"
   },
   "pkg": null,
   "retType": "ValType",
   "parameters": null,
   "qName": "ValType.Number"
  },
  "ValType.String": {
   "kind": 7,
   "namespace": "ValType",
   "name": "String",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "String"
   },
   "pkg": null,
   "retType": "ValType",
   "parameters": null,
   "qName": "ValType.String"
  },
  "ValType.Object": {
   "kind": 7,
   "namespace": "ValType",
   "name": "Object",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Object"
   },
   "pkg": null,
   "retType": "ValType",
   "parameters": null,
   "qName": "ValType.Object"
  },
  "ValType.Function": {
   "kind": 7,
   "namespace": "ValType",
   "name": "Function",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Function"
   },
   "pkg": null,
   "retType": "ValType",
   "parameters": null,
   "qName": "ValType.Function"
  },
  "loops.waitUntil": {
   "kind": 3,
   "namespace": "loops",
   "name": "waitUntil",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {
     "condition": "condition to test for",
     "timeOut": "if positive, maximum duration to wait for in milliseconds"
    },
    "jsDoc": "Busy wait for a condition to be true",
    "_name": "waitUntil"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "condition",
     "description": "condition to test for",
     "type": "() => boolean",
     "handlerParameters": [],
     "options": {},
     "isEnum": false
    },
    {
     "name": "timeOut",
     "description": "if positive, maximum duration to wait for in milliseconds",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "waitUntil(function () {})",
   "qName": "loops.waitUntil"
  },
  "Math.map": {
   "kind": 3,
   "namespace": "Math",
   "name": "map",
   "attributes": {
    "paramDefl": {
     "fromHigh": "1023",
     "toHigh": "4"
    },
    "callingConvention": 0,
    "_source": null,
    "help": "math/map",
    "weight": 10,
    "blockGap": "8",
    "blockId": "math_map",
    "block": "map %value|from low %fromLow|from high %fromHigh|to low %toLow|to high %toHigh",
    "paramHelp": {
     "value": "value to map in ranges",
     "fromLow": "the lower bound of the value's current range",
     "fromHigh": "the upper bound of the value's current range, eg: 1023",
     "toLow": "the lower bound of the value's target range",
     "toHigh": "the upper bound of the value's target range, eg: 4"
    },
    "jsDoc": "Re-maps a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.",
    "_name": "map"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "value",
     "description": "value to map in ranges",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "fromLow",
     "description": "the lower bound of the value's current range",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "fromHigh",
     "description": "the upper bound of the value's current range, eg: 1023",
     "type": "number",
     "initializer": "1023",
     "default": "1023",
     "options": {},
     "isEnum": false
    },
    {
     "name": "toLow",
     "description": "the lower bound of the value's target range",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "toHigh",
     "description": "the upper bound of the value's target range, eg: 4",
     "type": "number",
     "initializer": "4",
     "default": "4",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "map(0, 0, 1023, 0, 4)",
   "qName": "Math.map"
  },
  "Math.constrain": {
   "kind": 3,
   "namespace": "Math",
   "name": "constrain",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "math/constrain",
    "weight": 11,
    "blockGap": "8",
    "blockId": "math_constrain_value",
    "block": "constrain %value|between %low|and %high",
    "paramHelp": {
     "x": "the number to constrain, all data types",
     "y": "the lower end of the range, all data types",
     "z": "the upper end of the range, all data types"
    },
    "jsDoc": "Constrains a number to be within a range",
    "_name": "constrain"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "value",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "low",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "high",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "constrain(0, 0, 0)",
   "qName": "Math.constrain"
  },
  "Math.isin": {
   "kind": 3,
   "namespace": "Math",
   "name": "isin",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "math/isin",
    "weight": 11,
    "advanced": true,
    "blockGap": "8",
    "paramHelp": {
     "theta": "input angle from 0-255"
    },
    "jsDoc": "Returns the sine of an input angle. This is an 8-bit approximation.",
    "_name": "isin"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "theta",
     "description": "input angle from 0-255",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "isin(0)",
   "qName": "Math.isin"
  },
  "Math.icos": {
   "kind": 3,
   "namespace": "Math",
   "name": "icos",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "math/icos",
    "weight": 10,
    "advanced": true,
    "blockGap": "8",
    "paramHelp": {
     "theta": "input angle from 0-255"
    },
    "jsDoc": "Returns the cosine of an input angle. This is an 8-bit approximation.",
    "_name": "icos"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "theta",
     "description": "input angle from 0-255",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "icos(0)",
   "qName": "Math.icos"
  },
  "input": {
   "kind": 5,
   "namespace": "",
   "name": "input",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "color": "#B4009E",
    "weight": 98,
    "icon": "",
    "paramHelp": {},
    "jsDoc": "Respond to and read data from buttons and sensors.",
    "_name": "input"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "input"
  },
  "loops.__timePicker": {
   "kind": 3,
   "namespace": "loops",
   "name": "__timePicker",
   "attributes": {
    "paramDefl": {
     "ms": "500"
    },
    "callingConvention": 0,
    "_source": null,
    "blockId": "timePicker",
    "block": "%ms",
    "blockHidden": true,
    "shim": "TD_ID",
    "colorSecondary": "#FFFFFF",
    "paramFieldEditor": {
     "ms": "numberdropdown"
    },
    "paramFieldEditorOptions": {
     "ms": {
      "decompileLiterals": "true",
      "data": "[[\"100 ms\", 100], [\"200 ms\", 200], [\"500 ms\", 500], [\"1 second\", 1000], [\"2 seconds\", 2000]]"
     }
    },
    "paramHelp": {
     "ms": "time duration in milliseconds, eg: 500, 1000"
    },
    "jsDoc": "Get the time field editor",
    "_name": "___timePicker"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "ms",
     "description": "time duration in milliseconds, eg: 500, 1000",
     "type": "number",
     "initializer": "500",
     "default": "500",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "__timePicker(500)",
   "qName": "loops.__timePicker"
  },
  "control.panic": {
   "kind": 3,
   "namespace": "control",
   "name": "panic",
   "attributes": {
    "paramDefl": {
     "code": "5"
    },
    "callingConvention": 0,
    "_source": null,
    "help": "control/panic",
    "weight": 29,
    "blockId": "control_panic",
    "block": "panic %code",
    "shim": "pxtrt::panic",
    "paramHelp": {
     "code": "an error number to display. eg: 5"
    },
    "jsDoc": "Display an error code and stop the program.",
    "_name": "panic"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "code",
     "description": "an error number to display. eg: 5",
     "type": "number",
     "initializer": "5",
     "default": "5",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "panic(5)",
   "qName": "control.panic"
  },
  "control.assert": {
   "kind": 3,
   "namespace": "control",
   "name": "assert",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "control/assert",
    "weight": 30,
    "blockId": "control_assert",
    "block": "assert %cond|with value %code",
    "paramHelp": {},
    "jsDoc": "Display an error code and stop the program when the assertion is `false`.",
    "_name": "assert"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "cond",
     "description": "",
     "type": "boolean",
     "options": {},
     "isEnum": false
    },
    {
     "name": "code",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "assert(false, 0)",
   "qName": "control.assert"
  },
  "control.fail": {
   "kind": 3,
   "namespace": "control",
   "name": "fail",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "fail"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "message",
     "description": "",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "fail(\"\")",
   "qName": "control.fail"
  },
  "control.AnimationQueue": {
   "kind": 8,
   "namespace": "control",
   "name": "AnimationQueue",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "AnimationQueue"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "control.AnimationQueue",
   "parameters": null,
   "qName": "control.AnimationQueue"
  },
  "control.AnimationQueue.running": {
   "kind": 2,
   "namespace": "control.AnimationQueue",
   "name": "running",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "running"
   },
   "pkg": null,
   "retType": "boolean",
   "parameters": null,
   "qName": "control.AnimationQueue.running"
  },
  "control.AnimationQueue.eventID": {
   "kind": 2,
   "namespace": "control.AnimationQueue",
   "name": "eventID",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "eventID"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "control.AnimationQueue.eventID"
  },
  "control.AnimationQueue.interval": {
   "kind": 2,
   "namespace": "control.AnimationQueue",
   "name": "interval",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "interval"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "control.AnimationQueue.interval"
  },
  "control.AnimationQueue.runUntilDone": {
   "kind": 1,
   "namespace": "control.AnimationQueue",
   "name": "runUntilDone",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Runs 'render' in a loop until it returns false or the 'stop' function is called",
    "_name": "runUntilDone"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "render",
     "description": "",
     "type": "() => boolean",
     "handlerParameters": [],
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "runUntilDone(function () {})",
   "qName": "control.AnimationQueue.runUntilDone"
  },
  "control.AnimationQueue.isCancelled": {
   "kind": 1,
   "namespace": "control.AnimationQueue",
   "name": "isCancelled",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "isCancelled"
   },
   "pkg": null,
   "retType": "boolean",
   "parameters": [
    {
     "name": "evid",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "isCancelled(0)",
   "qName": "control.AnimationQueue.isCancelled"
  },
  "control.AnimationQueue.cancel": {
   "kind": 1,
   "namespace": "control.AnimationQueue",
   "name": "cancel",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Cancels the current running animation and clears the queue",
    "_name": "cancel"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [],
   "snippet": "cancel()",
   "qName": "control.AnimationQueue.cancel"
  },
  "hex": {
   "kind": 3,
   "namespace": "",
   "name": "hex",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "@hex",
    "paramHelp": {},
    "jsDoc": "Tagged hex literal converter",
    "_name": "hex"
   },
   "pkg": null,
   "retType": "Buffer",
   "parameters": [
    {
     "name": "lits",
     "description": "",
     "type": "any",
     "options": {},
     "isEnum": false
    },
    {
     "name": "args",
     "description": "",
     "type": "any[]",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "hex(null, [])",
   "qName": "hex"
  },
  "serial.writeLine": {
   "kind": 3,
   "namespace": "serial",
   "name": "writeLine",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 90,
    "help": "serial/write-line",
    "blockGap": "8",
    "blockHidden": true,
    "blockId": "serial_writeline",
    "block": "serial|write line %text",
    "paramHelp": {
     "value": "to send over serial"
    },
    "jsDoc": "Write a line of text to the serial port.",
    "_name": "writeLine"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "text",
     "description": "",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "writeLine(\"\")",
   "qName": "serial.writeLine"
  },
  "serial.writeNumber": {
   "kind": 3,
   "namespace": "serial",
   "name": "writeNumber",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "serial/write-number",
    "weight": 89,
    "blockGap": "8",
    "blockHidden": true,
    "blockId": "serial_writenumber",
    "block": "serial|write number %value",
    "paramHelp": {},
    "jsDoc": "Write a number to the serial port.",
    "_name": "writeNumber"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "value",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "writeNumber(0)",
   "qName": "serial.writeNumber"
  },
  "serial.writeValue": {
   "kind": 3,
   "namespace": "serial",
   "name": "writeValue",
   "attributes": {
    "paramDefl": {
     "name": "x"
    },
    "callingConvention": 0,
    "_source": null,
    "weight": 88,
    "blockGap": "8",
    "help": "serial/write-value",
    "blockHidden": true,
    "blockId": "serial_writevalue",
    "block": "serial|write value %name|= %value",
    "paramHelp": {
     "name": "name of the value stream, eg: \"x\"",
     "value": "to write"
    },
    "jsDoc": "Write a name:value pair as a line of text to the serial port.",
    "_name": "writeValue"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "name",
     "description": "name of the value stream, eg: \"x\"",
     "type": "string",
     "initializer": "x",
     "default": "x",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "to write",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "writeValue(\"x\", 0)",
   "qName": "serial.writeValue"
  },
  "console": {
   "kind": 5,
   "namespace": "",
   "name": "console",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 12,
    "color": "#002050",
    "icon": "",
    "advanced": true,
    "paramHelp": {},
    "jsDoc": "Reading and writing data to the console output.",
    "_name": "console",
    "block": "console"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "console"
  },
  "console.log": {
   "kind": 3,
   "namespace": "console",
   "name": "log",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 90,
    "help": "console/log",
    "blockGap": "8",
    "blockId": "console_log",
    "block": "console|log %text",
    "paramHelp": {
     "value": "to send"
    },
    "jsDoc": "Write a line of text to the console output.",
    "_name": "log"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "text",
     "description": "",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "log(\"\")",
   "qName": "console.log"
  },
  "console.logValue": {
   "kind": 3,
   "namespace": "console",
   "name": "logValue",
   "attributes": {
    "paramDefl": {
     "name": "x"
    },
    "callingConvention": 0,
    "_source": null,
    "weight": 88,
    "blockGap": "8",
    "help": "console/log-value",
    "blockId": "console_log_value",
    "block": "console|log value %name|= %value",
    "paramHelp": {
     "name": "name of the value stream, eg: \"x\"",
     "value": "to write"
    },
    "jsDoc": "Write a name:value pair as a line of text to the console output.",
    "_name": "logValue"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "name",
     "description": "name of the value stream, eg: \"x\"",
     "type": "string",
     "initializer": "x",
     "default": "x",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "to write",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "logValue(\"x\", 0)",
   "qName": "console.logValue"
  },
  "i": {
   "kind": 4,
   "namespace": "",
   "name": "i",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "i"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "i"
  },
  "f": {
   "kind": 4,
   "namespace": "",
   "name": "f",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "f"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "f"
  },
  "plus": {
   "kind": 4,
   "namespace": "",
   "name": "plus",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "plus"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "plus"
  },
  "minus": {
   "kind": 4,
   "namespace": "",
   "name": "minus",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "minus"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "minus"
  },
  "r": {
   "kind": 4,
   "namespace": "",
   "name": "r",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "r"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "r"
  },
  "ri": {
   "kind": 4,
   "namespace": "",
   "name": "ri",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "ri"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "ri"
  }
 },
 "jres": {}
}